# 1225. [S/W 문제해결 기본] 7일차 - 암호생성기
# print부분 문법 확인

"""
다음 주어진 조건에 따라 n개의 수를 처리하면 8자리의 암호를 생성할 수 있다.

- 8개의 숫자를 입력 받는다.

- 첫 번째 숫자를 1 감소한 뒤, 맨 뒤로 보낸다.

다음 첫 번째 수는 2 감소한 뒤 맨 뒤로, 그 다음 첫 번째 수는 3을 감소하고 맨 뒤로, 그 다음 수는 4, 그 다음 수는 5를 감소한다.

이와 같은 작업을 한 사이클이라 한다.

- 숫자가 감소할 때 0보다 작아지는 경우 0으로 유지되며, 프로그램은 종료된다. 이 때의 8자리의 숫자 값이 암호가 된다.

[제약 사항]

주어지는 각 수는 integer 범위를 넘지 않는다.

마지막 암호 배열은 모두 한 자리 수로 구성되어 있다.


[입력]

총 10개의 테스트 케이스가 주어진다.

각 테스트 케이스의 첫 줄에는 테스트 케이스의 번호가 주어지고, 그 다음 줄에는 8개의 데이터가 주어진다.

[출력]

#부호와 함께 테스트케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스의 답을 출력한다.
"""

for _ in range(1, 11):
    tc = int(input())
    data = list(map(int, input().split()))

    pattern = 1     # 비밀번호 패턴

    while True:
        first = data.pop(0)     # 첫 번째(맨 앞) 데이터 값 pop 하여 first에 할당
        first -= pattern        # 패턴만큼 감소

        if first <= 0:       # 데이터값이 0보다 작아지는 경우
            first = 0

        data.append(first)  # 패턴을 적용한 first 값을 data 에 append (맨 뒤로 삽입)

        pattern += 1        # append 후 패턴 값 1씩 증가
        if pattern > 5:     # 패턴이 5보다 커지면
            pattern = 1     # 1로 변경

        if first == 0:      # 맨 앞 데이터 값이 0이 되면 종료
            break

    print(f'#{tc} {" ".join(map(str, data))}')




