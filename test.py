# 접근 방법 1
# 완전 탐색 방식
# dfs는 반복문 or tree
# tree 형식으로 생각하면 쉽다!

# 시작점: 1월 / 누적금액 0원
# 끝점: 12월
def dfs(month, sum_cost):
    global ans
    # 기저조건. 12월까지 모두 보았는가?
    if month > 12:
        ans = min(ans, sum_cost)
        return

    # 1일권으로 모두 구매한 경우(다음 재귀에서 다음 달을 확인)
    dfs(month+1, sum_cost + (days[month]*cost[0]))
    # 1달권으로 모두 구매한 경우(다음 재귀에서 다음 달을 확인)
    dfs(month+1, sum_cost + cost[1])
    # 3달권으로 모두 구매한 경우(다음 재귀에서 3달 후를 확인)
    dfs(month+3, sum_cost + cost[2])
    # 1년권으로 구매한 경우의 금액(다음 재귀에서 12달 후를 확인)
    #   - [참고] 사실 재귀에서 빼고, 1월에 구입한 비용이랑 비교해도 된다
    #   - 직관적으로 보기 위해 강의용으로 추가
    dfs(month+12, sum_cost + cost[3])


T = int(input())

for tc in range(1,T+1):
    cost = list(map(int, input().split()))
    # 인덱스는 0~11이다. 직관성을 위해 1~12를 쓰고싶다면?
    # 맨 앞에 쓰레기값 추가(일종의 트릭)
    days = [0] + list(map(int, input().split()))
    ans = 1e9
    dfs(1, 0)
    print(f'#{tc} {ans}')


# ---------------------------------------

# 접근 방법 2
# 3월 기준으로 생각: 2월까지의 최소 금액 + 본인의 금액 중 최소 금액
# 이전의 최소 금액들을 활용해서 내 최소 금액을 구할 수 있다!
# DP 활용하기
# 왜 DP로 활용 가능한가? (DP 사용 가능 조건)
# 1. 작은 문제로 분할 가능해야한다.
#   - 전체 문제의 합 = 각 달까지의 최소 금액들이 쌓여서 완성
#   => 각 달까지의 최소 금액 문제로 생각
# 2. 뒤에 결과를 구할 때, 앞에서 구했던 결과가 변하면 안 된다.
# [참고] 그리디 사용 가능 조건
# 1. 현재 계산에 의해 이전의 결과가 바뀌지 않을 것(독립적으로 존재)
# 2. 가장 최선의 선택들이 최종 결과의 최선이 되어야한다.

T = int(input())

for tc in range(1,T+1):
    cost = list(map(int, input().split()))
    # 인덱스는 0~11이다. 직관성을 위해 1~12를 쓰고싶다면?
    # 맨 앞에 쓰레기값 추가(일종의 트릭)
    days = [0] + list(map(int, input().split()))
    dp = [0] * 13 # 1~12월 최소 금액들을 저장

    # dp 문제들은 대부분 초기값을 밖에서 정해준다. (인덱스 에러, 오류값 방지)
    for i in range(1, 13):
        # 현재 달의 최소 비용을 계산
        # 1~ 2월까지는 이전 달 + 1일권 구입 / 이전 달 + 1달권
        # 3월 이후: 이전 달 + 1일권 구입 / 이전 달 + 1달권 / 3달 전에 3달권 구입
        # 위의 3가지 중 최소
        dp[i] = min(dp[i-1] + (days[i]*cost[0]), dp[i-1]+cost[1], dp[i-3] + cost[2])

        # index 오류를 피하기 위해, 3일 이후 계산을 따로 작성
        if i >= 3:
            # 1일 권 vs 1달 권 vs 3달 권
            dp[i] = min(dp[i], dp[i-3]+cost[2])
    # 12월까지 계산 결과 vs 1년권
    result = min(dp[12], cost[3])
    print(f'#{tc} {result}')
